#! /bin/bash

#arguments declaration
psql_host=$1
psql_port=$2
db_name=$3
psql_user=$4
psql_password=$5

lscpu_out=`lscpu`

get_hostname () {
	# $(cmd) equivalent to `cmd`
	hostname=$(hostname -f)
}

get_cpu_number() {
	cpu_number=$(echo "$lscpu_out" | egrep "^CPU\(s\):" | awk '{print $2}' | xargs)
}

#helper function
get_lscpu_value() {
	pattern=$1
	value=$(echo "$lscpu_out" | egrep "$pattern" | awk -F':' '{print $2}' | xargs)
	echo "value=$value"
}

get_cpu_architecture() {
	get_lscpu_value "Architecture"
	cpu_architecture=$value
}

get_cpu_model() {
	get_lscpu_value "Model:"
	cpu_model=$value
}

get_cpu_mhz() {
	get_lscpu_value "CPU MHz:"
	cpu_mhz=$value
}

get_L2_cache() {
	get_lscpu_value "L2 cache:"
	L2_cache=$(echo $value | sed s'/K//') #removes the 'K' from $value
}

#STEP1: parse data and setup variables
get_hostname
get_cpu_number
get_cpu_architecture
get_cpu_model
get_cpu_mhz
get_L2_cache
total_mem=$(cat /proc/meminfo | egrep MemTotal | awk '{print $2}')
timestamp=$(date +"%Y-%m-%d %H:%M:%S")  #citation: www.cyberciti.biz/faq/linuz-unix-formatting-dates-for-display/

#STEP2: construct INSERT statement
insert_stmt=$(cat <<-END
INSERT INTO host_info (hostname, cpu_number, cpu_architecture, cpu_model, cpu_mhz, L2_cache, total_mem, "timestamp") VALUES('${hostname}',${cpu_number},'${cpu_architecture}', '${cpu_model}', ${cpu_mhz}, ${L2_cache}, ${total_mem}, '${timestamp}');
END
)
echo $insert_stmt

#STEP3: Execute INSERT statement
export PGPASSWORD=$psql_password
psql -h $psql_host -p $psql_port -U $psql_user -d $db_name -c "$insert_stmt"
sleep 1

#STEP4: Save host_id generated by PSQL table to a local file
host_id=`psql -h localhost -U postgres host_agent -c "select id from host_info where hostname='${hostname}'" | tail -3 | head -1 | xargs`
echo $host_id > ~/host_id
cat ~/host_id
